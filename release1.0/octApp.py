"""
	Copyright 2018, 2019 Bruno Cabado Lousa
	
	This file is part of octApp.

    octApp is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    octApp is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with octApp.  If not, see <https://www.gnu.org/licenses/>.
"""

# -*- coding: utf-8 -*-

from PyQt5 import QtCore, QtGui, QtWidgets
import cv2
import numpy as np
import backend as back
import copy

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setWindowModality(QtCore.Qt.ApplicationModal)
        MainWindow.resize(924, 718)
        MainWindow.setTabShape(QtWidgets.QTabWidget.Rounded)
        MainWindow.setDockNestingEnabled(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.verticalLeftLayout = QtWidgets.QVBoxLayout()
        self.verticalLeftLayout.setContentsMargins(0, 1, 0, 0)
        self.verticalLeftLayout.setObjectName("verticalLeftLayout")
        self.imageZone = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setUnderline(False)
        self.imageZone.setFont(font)
        self.imageZone.setMouseTracking(True)
        self.imageZone.setFrameShape(QtWidgets.QFrame.Box)
        self.imageZone.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.imageZone.setText("")
        self.imageZone.setScaledContents(False)
        self.imageZone.setObjectName("imageZone")
        self.verticalLeftLayout.addWidget(self.imageZone)
        self.imageSlider = QtWidgets.QSlider(self.centralwidget)
        self.imageSlider.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.imageSlider.sizePolicy().hasHeightForWidth())
        self.imageSlider.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(1)
        self.imageSlider.setFont(font)
        self.imageSlider.setMouseTracking(True)
        self.imageSlider.setMaximum(1000)
        self.imageSlider.setSingleStep(1)
        self.imageSlider.setPageStep(0)
        self.imageSlider.setTracking(True)
        self.imageSlider.setOrientation(QtCore.Qt.Horizontal)
        self.imageSlider.setInvertedAppearance(False)
        self.imageSlider.setTickPosition(QtWidgets.QSlider.NoTicks)
        self.imageSlider.setObjectName("imageSlider")
        self.verticalLeftLayout.addWidget(self.imageSlider)
        self.gridLayout.addLayout(self.verticalLeftLayout, 1, 0, 1, 1)
        self.BottomLayout = QtWidgets.QGridLayout()
        self.BottomLayout.setObjectName("BottomLayout")
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setEnabled(True)
        self.progressBar.setProperty("value", 24)
        self.progressBar.setAlignment(QtCore.Qt.AlignCenter)
        self.progressBar.setTextVisible(True)
        self.progressBar.setInvertedAppearance(False)
        self.progressBar.setTextDirection(QtWidgets.QProgressBar.TopToBottom)
        self.progressBar.setObjectName("progressBar")
        self.BottomLayout.addWidget(self.progressBar, 0, 0, 1, 1)
        self.gridLayout.addLayout(self.BottomLayout, 4, 0, 1, 2)
        self.verticalRightLayout = QtWidgets.QVBoxLayout()
        self.verticalRightLayout.setObjectName("verticalRightLayout")
        self.distancesLabel = QtWidgets.QLabel(self.centralwidget)
        self.distancesLabel.setEnabled(True)
        self.distancesLabel.setMaximumSize(QtCore.QSize(60, 13))
        self.distancesLabel.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.distancesLabel.setFrameShadow(QtWidgets.QFrame.Plain)
        self.distancesLabel.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.distancesLabel.setObjectName("distancesLabel")
        self.verticalRightLayout.addWidget(self.distancesLabel, 0, QtCore.Qt.AlignHCenter)
        self.noneDistance = QtWidgets.QRadioButton(self.centralwidget)
        self.noneDistance.setEnabled(False)
        self.noneDistance.setObjectName("noneDistance")
        self.verticalRightLayout.addWidget(self.noneDistance)
        self.upDistance = QtWidgets.QRadioButton(self.centralwidget)
        self.upDistance.setEnabled(False)
        self.upDistance.setCheckable(True)
        self.upDistance.setChecked(False)
        self.upDistance.setAutoRepeat(False)
        self.upDistance.setObjectName("upDistance")
        self.verticalRightLayout.addWidget(self.upDistance)
        self.euclideanDistance = QtWidgets.QRadioButton(self.centralwidget)
        self.euclideanDistance.setEnabled(False)
        self.euclideanDistance.setObjectName("euclideanDistance")
        self.verticalRightLayout.addWidget(self.euclideanDistance)
        self.distancesSeparator = QtWidgets.QFrame(self.centralwidget)
        self.distancesSeparator.setFrameShape(QtWidgets.QFrame.HLine)
        self.distancesSeparator.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.distancesSeparator.setObjectName("distancesSeparator")
        self.verticalRightLayout.addWidget(self.distancesSeparator, 0, QtCore.Qt.AlignTop)
        self.infoSeparator = QtWidgets.QFrame(self.centralwidget)
        self.infoSeparator.setFrameShape(QtWidgets.QFrame.HLine)
        self.infoSeparator.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.infoSeparator.setObjectName("buttonsSeparator")
        self.verticalRightLayout.addWidget(self.infoSeparator)
        self.distanceLabel = QtWidgets.QLabel(self.centralwidget)
        self.distanceLabel.setEnabled(True)
        self.distanceLabel.setMaximumSize(QtCore.QSize(120, 13))
        self.distanceLabel.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.distanceLabel.setFrameShadow(QtWidgets.QFrame.Plain)
        self.distanceLabel.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.distanceLabel.setObjectName("distanceLabel")
        self.verticalRightLayout.addWidget(self.distanceLabel, 0, QtCore.Qt.AlignHCenter)
        self.distanceCase = QtWidgets.QLineEdit(self.centralwidget)
        self.distanceCase.setReadOnly(True)
        self.distanceCase.setMaximumSize(QtCore.QSize(120, 20))
        self.distanceCase.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.distanceCase.setObjectName("distanceCase")
        self.verticalRightLayout.addWidget(self.distanceCase, 0, QtCore.Qt.AlignHCenter)
        self.minLabel = QtWidgets.QLabel(self.centralwidget)
        self.minLabel.setEnabled(True)
        self.minLabel.setMaximumSize(QtCore.QSize(120, 13))
        self.minLabel.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.minLabel.setFrameShadow(QtWidgets.QFrame.Plain)
        self.minLabel.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.minLabel.setObjectName("minLabel")
        self.verticalRightLayout.addWidget(self.minLabel, 0, QtCore.Qt.AlignHCenter)
        self.minCase = QtWidgets.QLineEdit(self.centralwidget)
        self.minCase.setReadOnly(True)
        self.minCase.setMaximumSize(QtCore.QSize(120, 20))
        self.minCase.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.minCase.setObjectName("minCase")
        self.verticalRightLayout.addWidget(self.minCase, 0, QtCore.Qt.AlignHCenter)
        self.maxLabel = QtWidgets.QLabel(self.centralwidget)
        self.maxLabel.setEnabled(True)
        self.maxLabel.setMaximumSize(QtCore.QSize(120, 13))
        self.maxLabel.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.maxLabel.setFrameShadow(QtWidgets.QFrame.Plain)
        self.maxLabel.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.maxLabel.setObjectName("maxLabel")
        self.verticalRightLayout.addWidget(self.maxLabel, 0, QtCore.Qt.AlignHCenter)
        self.maxCase = QtWidgets.QLineEdit(self.centralwidget)
        self.maxCase.setReadOnly(True)
        self.maxCase.setMaximumSize(QtCore.QSize(120, 20))
        self.maxCase.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.maxCase.setObjectName("maxCase")
        self.verticalRightLayout.addWidget(self.maxCase, 0, QtCore.Qt.AlignHCenter)
        self.meanLabel = QtWidgets.QLabel(self.centralwidget)
        self.meanLabel.setEnabled(True)
        self.meanLabel.setMaximumSize(QtCore.QSize(120, 13))
        self.meanLabel.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.meanLabel.setFrameShadow(QtWidgets.QFrame.Plain)
        self.meanLabel.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.meanLabel.setObjectName("meanLabel")
        self.verticalRightLayout.addWidget(self.meanLabel, 0, QtCore.Qt.AlignHCenter)
        self.meanCase = QtWidgets.QLineEdit(self.centralwidget)
        self.meanCase.setReadOnly(True)
        self.meanCase.setMaximumSize(QtCore.QSize(120, 20))
        self.meanCase.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.meanCase.setObjectName("meanCase")
        self.verticalRightLayout.addWidget(self.meanCase, 0, QtCore.Qt.AlignHCenter)
        self.stdLabel = QtWidgets.QLabel(self.centralwidget)
        self.stdLabel.setEnabled(True)
        self.stdLabel.setMaximumSize(QtCore.QSize(120, 13))
        self.stdLabel.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.stdLabel.setFrameShadow(QtWidgets.QFrame.Plain)
        self.stdLabel.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.stdLabel.setObjectName("stdLabel")
        self.verticalRightLayout.addWidget(self.stdLabel, 0, QtCore.Qt.AlignHCenter)
        self.stdCase = QtWidgets.QLineEdit(self.centralwidget)
        self.stdCase.setReadOnly(True)
        self.stdCase.setMaximumSize(QtCore.QSize(120, 20))
        self.stdCase.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.stdCase.setObjectName("stdCase")
        self.verticalRightLayout.addWidget(self.stdCase, 0, QtCore.Qt.AlignHCenter)
        self.varLabel = QtWidgets.QLabel(self.centralwidget)
        self.varLabel.setEnabled(True)
        self.varLabel.setMaximumSize(QtCore.QSize(120, 13))
        self.varLabel.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.varLabel.setFrameShadow(QtWidgets.QFrame.Plain)
        self.varLabel.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.varLabel.setObjectName("varLabel")
        self.verticalRightLayout.addWidget(self.varLabel, 0, QtCore.Qt.AlignHCenter)
        self.varCase = QtWidgets.QLineEdit(self.centralwidget)
        self.varCase.setReadOnly(True)
        self.varCase.setMaximumSize(QtCore.QSize(120, 20))
        self.varCase.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.varCase.setObjectName("varCase")
        self.verticalRightLayout.addWidget(self.varCase, 0, QtCore.Qt.AlignHCenter)
        self.infoCheckBox = QtWidgets.QCheckBox(self.centralwidget)
        self.infoCheckBox.setChecked(False)
        self.infoCheckBox.setMaximumSize(QtCore.QSize(100, 20))
        self.infoCheckBox.setObjectName("infoCheckBox")
        self.verticalRightLayout.addWidget(self.infoCheckBox, 0, QtCore.Qt.AlignHCenter)
        self.buttonsSeparator = QtWidgets.QFrame(self.centralwidget)
        self.buttonsSeparator.setFrameShape(QtWidgets.QFrame.HLine)
        self.buttonsSeparator.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.buttonsSeparator.setObjectName("buttonsSeparator")
        self.verticalRightLayout.addWidget(self.buttonsSeparator)
        self.allDistancesButton = QtWidgets.QPushButton(self.centralwidget)
        self.allDistancesButton.setEnabled(False)
        self.allDistancesButton.setObjectName("allDistancesButton")
        self.verticalRightLayout.addWidget(self.allDistancesButton)
        self.hideAllDistancesButton = QtWidgets.QPushButton(self.centralwidget)
        self.hideAllDistancesButton.setEnabled(False)
        self.hideAllDistancesButton.setObjectName("hideAllDistancesButton")
        self.verticalRightLayout.addWidget(self.hideAllDistancesButton)
        self.showCurvesButton = QtWidgets.QPushButton(self.centralwidget)
        self.showCurvesButton.setEnabled(False)
        self.showCurvesButton.setObjectName("showCurvesButton")
        self.verticalRightLayout.addWidget(self.showCurvesButton)
        self.hideCurvesButton = QtWidgets.QPushButton(self.centralwidget)
        self.hideCurvesButton.setEnabled(False)
        self.hideCurvesButton.setObjectName("hideCurvesButton")
        self.verticalRightLayout.addWidget(self.hideCurvesButton)
        self.downSeparator = QtWidgets.QFrame(self.centralwidget)
        self.downSeparator.setFrameShape(QtWidgets.QFrame.HLine)
        self.downSeparator.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.downSeparator.setObjectName("downSeparator")
        self.verticalRightLayout.addWidget(self.downSeparator)
        self.xSpinBox = QtWidgets.QSpinBox(self.centralwidget)
        self.xSpinBox.setEnabled(False)
        self.xSpinBox.setReadOnly(False)
        self.xSpinBox.setKeyboardTracking(False)
        self.xSpinBox.setMaximum(800)
        self.xSpinBox.setObjectName("xSpinBox")
        self.verticalRightLayout.addWidget(self.xSpinBox)
        self.gridLayout.addLayout(self.verticalRightLayout, 1, 1, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 924, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuDistances = QtWidgets.QMenu(self.menubar)
        self.menuDistances.setObjectName("menuDistances")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setEnabled(True)
        self.statusbar.setSizeGripEnabled(True)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setEnabled(False)
        self.actionSave.setObjectName("actionSave")
        self.actionUp_Point = QtWidgets.QAction(MainWindow)
        self.actionUp_Point.setCheckable(True)
        self.actionUp_Point.setEnabled(False)
        self.actionUp_Point.setObjectName("actionUp_Point")
        self.actionEuclidean = QtWidgets.QAction(MainWindow)
        self.actionEuclidean.setCheckable(True)
        self.actionEuclidean.setEnabled(False)
        self.actionEuclidean.setObjectName("actionEuclidean")
        self.actionShow_all = QtWidgets.QAction(MainWindow)
        self.actionShow_all.setCheckable(True)
        self.actionShow_all.setEnabled(False)
        self.actionShow_all.setObjectName("actionShow_all")
        self.actionHide_all = QtWidgets.QAction(MainWindow)
        self.actionHide_all.setCheckable(True)
        self.actionHide_all.setEnabled(False)
        self.actionHide_all.setObjectName("actionHide_all")
        self.actionShowCurves = QtWidgets.QAction(MainWindow)
        self.actionShowCurves.setCheckable(True)
        self.actionShowCurves.setEnabled(False)
        self.actionShowCurves.setObjectName("actionShowCurves")
        self.actionHideCurves = QtWidgets.QAction(MainWindow)
        self.actionHideCurves.setCheckable(True)
        self.actionHideCurves.setEnabled(False)
        self.actionHideCurves.setObjectName("actionHideCurves")
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionAbout = QtWidgets.QAction(MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.actionNone = QtWidgets.QAction(MainWindow)
        self.actionNone.setCheckable(True)
        self.actionNone.setEnabled(False)
        self.actionNone.setObjectName("actionNone")
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        self.menuDistances.addAction(self.actionNone)
        self.menuDistances.addAction(self.actionUp_Point)
        self.menuDistances.addAction(self.actionEuclidean)
        self.menuDistances.addSeparator()
        self.menuDistances.addAction(self.actionShow_all)
        self.menuDistances.addAction(self.actionHide_all)
        self.menuDistances.addAction(self.actionShowCurves)
        self.menuDistances.addAction(self.actionHideCurves)
        self.menuHelp.addAction(self.actionAbout)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuDistances.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        ### My Code ###
        self.progressBar.hide()
        self.hideAllDistancesButton.hide()
        self.hideCurvesButton.hide()
        self.infoSeparator.hide()
        self.distanceLabel.hide()
        self.distanceCase.hide()
        self.minLabel.hide()
        self.minCase.hide()
        self.maxLabel.hide()
        self.maxCase.hide()
        self.meanLabel.hide()
        self.meanCase.hide()
        self.stdLabel.hide()
        self.stdCase.hide()
        self.varLabel.hide()
        self.varCase.hide()
        self.infoCheckBox.hide()

        MainWindow.setMaximumSize(MainWindow.size())
        MainWindow.setMinimumSize(MainWindow.size())

        self.actionOpen.triggered.connect(self.setImage)
        self.actionSave.triggered.connect(self.saveImage)

        self.actionNone.triggered.connect(self.setNoneDistance)
        self.noneDistance.clicked.connect(self.setNoneDistance)

        self.actionUp_Point.triggered.connect(self.setUpDistance)
        self.upDistance.clicked.connect(self.setUpDistance)

        self.actionEuclidean.triggered.connect(self.setEuclideanDistance)
        self.euclideanDistance.clicked.connect(self.setEuclideanDistance)

        self.actionShow_all.triggered.connect(self.setAllDistances)
        self.allDistancesButton.clicked.connect(self.setAllDistances)

        self.actionHide_all.triggered.connect(self.setHideAllDistances)
        self.hideAllDistancesButton.clicked.connect(self.setHideAllDistances)

        self.actionShowCurves.triggered.connect(self.setShowCurves)
        self.showCurvesButton.clicked.connect(self.setShowCurves)

        self.actionHideCurves.triggered.connect(self.setHideCurves)
        self.hideCurvesButton.clicked.connect(self.setHideCurves)

        self.imageSlider.valueChanged.connect(self.valueChangeSlider)
        self.xSpinBox.valueChanged.connect(self.valueChangeXSpinBox)

        self.infoCheckBox.clicked.connect(self.setInfoOnImage)

        self.initialImageRGB = None
        self.initialImage = None

        self.readImageBGR = None
        self.initReadImageBGR = None
        self.readImage = None
        self.newImage = None
        self.funcUp = None
        self.funcDown = None

        self.up = None
        self.nearest = None

        self.statusbar.showMessage('')
        
        #self.init()

        ##########

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "OctApp"))
        self.distancesLabel.setText(_translate("MainWindow", "Distances:"))
        self.distanceLabel.setText(_translate("MainWindow", "Distance:"))
        self.minLabel.setText(_translate("MainWindow", "Min distance:"))
        self.maxLabel.setText(_translate("MainWindow", "Max distance:"))
        self.meanLabel.setText(_translate("MainWindow", "Mean distance:"))
        self.stdLabel.setText(_translate("MainWindow", "Standard deviation:"))
        self.varLabel.setText(_translate("MainWindow", "Variance:"))
        self.infoCheckBox.setText(_translate("MainWindow", "Info on image"))
        self.noneDistance.setText(_translate("MainWindow", "None"))
        self.upDistance.setText(_translate("MainWindow", "Up Point"))
        self.euclideanDistance.setText(_translate("MainWindow", "Euclidean"))
        self.allDistancesButton.setText(_translate("MainWindow", "Show all distances"))
        self.hideAllDistancesButton.setText(_translate("MainWindow", "Show one distance"))
        self.showCurvesButton.setText(_translate("MainWindow", "Show curves"))
        self.hideCurvesButton.setText(_translate("MainWindow", "Hide curves"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuDistances.setTitle(_translate("MainWindow", "Distances"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))
        self.actionSave.setText(_translate("MainWindow", "Save image"))
        self.actionUp_Point.setText(_translate("MainWindow", "Up Point"))
        self.actionEuclidean.setText(_translate("MainWindow", "Euclidean"))
        self.actionShow_all.setText(_translate("MainWindow", "Show all distances"))
        self.actionHide_all.setText(_translate("MainWindow", "Show one distance"))
        self.actionShowCurves.setText(_translate("MainWindow", "Show curves"))
        self.actionHideCurves.setText(_translate("MainWindow", "Hide curves"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionAbout.setText(_translate("MainWindow", "About"))
        self.actionNone.setText(_translate("MainWindow", "None"))
    
    ### My Code ###
    def init(self):
        fileName = 'initial.png'
        initialImageRGB = cv2.imread(fileName)
        initialImage = cv2.imread(fileName,0)
        height, width = initialImage.shape

        pixmap = QtGui.QPixmap.fromImage(QtGui.QImage(initialImageRGB.data, width, height, width*3, QtGui.QImage.Format_RGB888))
        MainWindow.setMaximumSize(MainWindow.size() + (pixmap.size() - self.imageZone.size()))
        MainWindow.setMinimumSize(MainWindow.size() + (pixmap.size() - self.imageZone.size()))
        self.imageZone.setMinimumSize(QtCore.QSize(pixmap.width(), pixmap.height()))
        self.imageZone.setMaximumSize(QtCore.QSize(pixmap.width(), pixmap.height()))
        self.imageZone.setPixmap(pixmap)
        self.imageZone.setAlignment(QtCore.Qt.AlignCenter)
        self.imageSlider.setMaximum(pixmap.width()-1)
        self.xSpinBox.setMaximum(pixmap.width()-1)
        MainWindow.resize(MainWindow.size())

    def setImage(self):
        fileName, _ = QtWidgets.QFileDialog.getOpenFileName(None, "Select Image", "", "Image Files (*.png *.jpg *.jpeg *.bmp)")
        if fileName:
            self.readImageBGR = cv2.imread(fileName)
            self.readImage = cv2.imread(fileName,0)
            #self.readImage = back.processImage(self.readImage)
            self.initReadImageBGR = copy.copy(self.readImageBGR)
            height, width = self.readImage.shape
            pixmap = QtGui.QPixmap.fromImage(QtGui.QImage(self.readImageBGR.data, width, height, width*3, QtGui.QImage.Format_RGB888))
            #pixmap = QtGui.QPixmap.fromImage(QtGui.QImage(self.readImage.data, width, height, width, QtGui.QImage.Format_Indexed8))
            #pixmap = QtGui.QPixmap.fromImage(QtGui.QImage(back.processImage(self.readImage).data, width, height, width, QtGui.QImage.Format_Indexed8))
            try:
                self.funcUp, self.funcDown = back.getCurves(self.readImage, self.readImageBGR)
                self.up = back.getUpPointDistances(self.readImage, self.funcDown, self.funcUp)
                self.nearest = back.getNearestPointDistances(self.readImage, self.funcDown, self.funcUp)
            except:
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Critical)
                msg.setText("Imposible to compute the given image")
                msg.setInformativeText("The process cannot be performed for the given image, the relevant curves could not be determined.")
                msg.setWindowTitle("Error")
                msg.setStandardButtons(QtWidgets.QMessageBox.Ok)  
                msg.exec_()
                return                  

            MainWindow.setMaximumSize(MainWindow.size() + (pixmap.size() - self.imageZone.size()))
            MainWindow.setMinimumSize(MainWindow.size() + (pixmap.size() - self.imageZone.size()))
            self.imageZone.setMinimumSize(QtCore.QSize(pixmap.width(), pixmap.height()))
            self.imageZone.setMaximumSize(QtCore.QSize(pixmap.width(), pixmap.height()))
            self.imageZone.setPixmap(pixmap)
            self.imageZone.setAlignment(QtCore.Qt.AlignCenter)
            self.imageSlider.setMaximum(pixmap.width()-1)
            self.xSpinBox.setMaximum(pixmap.width()-1)
            MainWindow.resize(MainWindow.size())

            #Revisar si se viene de una imagen activa
            self.noneDistance.setEnabled(True)
            self.noneDistance.setChecked(True)
            self.actionNone.setEnabled(True)
            self.actionNone.setChecked(True)
            self.upDistance.setEnabled(True)
            self.euclideanDistance.setEnabled(True)
            self.actionUp_Point.setEnabled(True)
            self.actionEuclidean.setEnabled(True)
            self.showCurvesButton.setEnabled(True)
            self.allDistancesButton.setEnabled(False)
            self.hideAllDistancesButton.setEnabled(False)
            self.actionShow_all.setEnabled(False)
            self.actionHide_all.setEnabled(False)
            self.actionSave.setEnabled(False)
            self.xSpinBox.setValue(0)
            self.imageSlider.setEnabled(False)
            self.xSpinBox.setEnabled(False)
            self.statusbar.showMessage('')
            self.setNoneDistance()
            
    def saveImage(self):
        fileName, _ = QtWidgets.QFileDialog.getSaveFileName(None, "Select Image", "", "Image Files (*.png *.jpg *.jpeg *.bmp)")
        if fileName:
            cv2.imwrite(fileName, cv2.cvtColor(self.newImage, cv2.COLOR_RGB2BGR))
        self.statusbar.showMessage('Image saved: ' + fileName)

    def setNoneDistance(self):
        self.noneDistance.setChecked(True)
        self.actionNone.setChecked(True)
        self.upDistance.setChecked(False)
        self.actionUp_Point.setChecked(False)
        self.euclideanDistance.setChecked(False)
        self.actionEuclidean.setChecked(False)
        self.actionShow_all.setEnabled(False)
        self.imageSlider.setEnabled(False)
        self.imageSlider.setValue(0)
        self.xSpinBox.setEnabled(False)
        self.xSpinBox.setValue(0)
        self.actionSave.setEnabled(True)
        self.hideAllDistancesButton.setEnabled(False)
        self.hideAllDistancesButton.hide()
        self.allDistancesButton.setEnabled(False)
        self.allDistancesButton.show()

        self.infoSeparator.hide()
        self.distanceLabel.hide()
        self.distanceCase.hide()
        self.minLabel.hide()
        self.minCase.hide()
        self.maxLabel.hide()
        self.maxCase.hide()
        self.meanLabel.hide()
        self.meanCase.hide()
        self.stdLabel.hide()
        self.stdCase.hide()
        self.varLabel.hide()
        self.varCase.hide()
        self.infoCheckBox.hide()
        self.infoCheckBox.setChecked(False)

        height, width = self.readImage.shape
        pixmap = QtGui.QPixmap.fromImage(QtGui.QImage(self.readImageBGR.data, width, height, width*3, QtGui.QImage.Format_RGB888))
        self.imageZone.setPixmap(pixmap)
        self.statusbar.showMessage('')
    
    def setUpDistance(self):
        self.noneDistance.setChecked(False)
        self.actionNone.setChecked(False)
        self.upDistance.setChecked(True)
        self.actionUp_Point.setChecked(True)
        self.euclideanDistance.setChecked(False)
        self.actionEuclidean.setChecked(False)
        self.actionShow_all.setEnabled(True)
        self.actionSave.setEnabled(True)
        self.newImage = copy.copy(self.readImageBGR)
        if self.hideAllDistancesButton.isEnabled():
            back.printDistances(self.newImage, self.up[1], self.up[0])
            height, width = self.readImage.shape
            if self.infoCheckBox.isChecked():
                cv2.putText(self.newImage, 'min distance: ' + str(round(min(self.up[1]),8)), (width - 600,height-100), cv2.FONT_HERSHEY_SIMPLEX, 0.50, (255, 255, 255))
                cv2.putText(self.newImage, 'max distance: ' + str(round(max(self.up[1]),8)), (width - 600,height-80), cv2.FONT_HERSHEY_SIMPLEX, 0.50, (255, 255, 255))
                cv2.putText(self.newImage, 'mean distance: ' + str(round(np.mean(self.up[1]),8)), (width - 600,height-60), cv2.FONT_HERSHEY_SIMPLEX, 0.50, (255, 255, 255))
                cv2.putText(self.newImage, 'standard deviation: ' + str(round(np.std(self.up[1]),8)), (width - 350,height-100), cv2.FONT_HERSHEY_SIMPLEX, 0.50, (255, 255, 255))
                cv2.putText(self.newImage, 'variance distance: ' + str(round(np.var(self.up[1]),8)), (width - 350,height-80), cv2.FONT_HERSHEY_SIMPLEX, 0.50, (255, 255, 255))
            pixmap = QtGui.QPixmap.fromImage(QtGui.QImage(self.newImage.data, width, height, width*3, QtGui.QImage.Format_RGB888))
            self.imageZone.setPixmap(pixmap)
            self.imageZone.repaint()
            self.statusbar.showMessage('min distance: ' + str(min(self.up[1])) + ', max distance: ' + str(max(self.up[1])) + ', mean distance: ' + str(np.mean(self.up[1])) + ', standard deviation: ' + str(np.std(self.up[1])) + ',  variance: ' + str(np.var(self.up[1])))
            self.minCase.setText(str(round(min(self.up[1]),8)))
            self.maxCase.setText(str(round(max(self.up[1]),8)))
            self.meanCase.setText(str(round(np.mean(self.up[1]),8)))
            self.stdCase.setText(str(round(np.std(self.up[1]),8)))
            self.varCase.setText(str(round(np.var(self.up[1]),8)))

            self.infoSeparator.show()
            self.distanceLabel.hide()
            self.distanceCase.hide()
            self.minLabel.show()
            self.minCase.show()
            self.maxLabel.show()
            self.maxCase.show()
            self.meanLabel.show()
            self.meanCase.show()
            self.stdLabel.show()
            self.stdCase.show()
            self.varLabel.show()
            self.varCase.show()
            self.infoCheckBox.show()
        else:
            self.allDistancesButton.setEnabled(True)
            self.imageSlider.setEnabled(True)
            self.xSpinBox.setEnabled(True)
            back.printDistance(self.newImage, self.up[1], self.up[0], self.xSpinBox.value())
            height, width = self.readImage.shape
            if self.infoCheckBox.isChecked():
                cv2.putText(self.newImage, 'distance: ' + str(self.up[1][self.xSpinBox.value()]), (width - 600,height-100), cv2.FONT_HERSHEY_SIMPLEX, 0.50, (255, 255, 255))
            pixmap = QtGui.QPixmap.fromImage(QtGui.QImage(self.newImage.data, width, height, width*3, QtGui.QImage.Format_RGB888))
            self.imageZone.setPixmap(pixmap)
            self.statusbar.showMessage('distance: ' + str(self.up[1][self.xSpinBox.value()]))
            self.distanceCase.setText(str(round(self.up[1][self.xSpinBox.value()],8)))

            self.infoSeparator.show()
            self.distanceLabel.show()
            self.distanceCase.show()
            self.minLabel.hide()
            self.minCase.hide()
            self.maxLabel.hide()
            self.maxCase.hide()
            self.meanLabel.hide()
            self.meanCase.hide()
            self.stdLabel.hide()
            self.stdCase.hide()
            self.varLabel.hide()
            self.varCase.hide()
            self.infoCheckBox.show()


    def setEuclideanDistance(self):
        self.noneDistance.setChecked(False)
        self.actionNone.setChecked(False)
        self.upDistance.setChecked(False)
        self.actionUp_Point.setChecked(False)
        self.euclideanDistance.setChecked(True)
        self.actionEuclidean.setChecked(True)
        self.actionShow_all.setEnabled(True)
        self.actionSave.setEnabled(True)
        self.newImage = copy.copy(self.readImageBGR)
        if self.hideAllDistancesButton.isEnabled():
            back.printDistances(self.newImage, self.nearest[1], self.nearest[0])
            height, width = self.readImage.shape
            if self.infoCheckBox.isChecked():
                cv2.putText(self.newImage, 'min distance: ' + str(round(min(self.nearest[1]),8)), (width - 600,height-100), cv2.FONT_HERSHEY_SIMPLEX, 0.50, (255, 255, 255))
                cv2.putText(self.newImage, 'max distance: ' + str(round(max(self.nearest[1]),8)), (width - 600,height-80), cv2.FONT_HERSHEY_SIMPLEX, 0.50, (255, 255, 255))
                cv2.putText(self.newImage, 'mean distance: ' + str(round(np.mean(self.nearest[1]),8)), (width - 600,height-60), cv2.FONT_HERSHEY_SIMPLEX, 0.50, (255, 255, 255))
                cv2.putText(self.newImage, 'standard deviation: ' + str(round(np.std(self.nearest[1]),8)), (width - 350,height-100), cv2.FONT_HERSHEY_SIMPLEX, 0.50, (255, 255, 255))
                cv2.putText(self.newImage, 'variance distance: ' + str(round(np.var(self.nearest[1]),8)), (width - 350,height-80), cv2.FONT_HERSHEY_SIMPLEX, 0.50, (255, 255, 255))
            pixmap = QtGui.QPixmap.fromImage(QtGui.QImage(self.newImage.data, width, height, width*3, QtGui.QImage.Format_RGB888))
            self.imageZone.setPixmap(pixmap)
            self.imageZone.repaint()
            self.statusbar.showMessage('min distance: ' + str(min(self.nearest[1])) + ', max distance: ' + str(max(self.nearest[1])) + ', mean distance: ' + str(np.mean(self.nearest[1])) + ', standard deviation: ' + str(np.std(self.nearest[1])) + ',  variance: ' + str(np.var(self.nearest[1])))
            self.minCase.setText(str(round(min(self.nearest[1]),8)))
            self.maxCase.setText(str(round(max(self.nearest[1]),8)))
            self.meanCase.setText(str(round(np.mean(self.nearest[1]),8)))
            self.stdCase.setText(str(round(np.std(self.nearest[1]),8)))
            self.varCase.setText(str(round(np.var(self.nearest[1]),8)))

            self.infoSeparator.show()
            self.distanceLabel.hide()
            self.distanceCase.hide()
            self.minLabel.show()
            self.minCase.show()
            self.maxLabel.show()
            self.maxCase.show()
            self.meanLabel.show()
            self.meanCase.show()
            self.stdLabel.show()
            self.stdCase.show()
            self.varLabel.show()
            self.varCase.show()
            self.infoCheckBox.show()
        else:
            self.allDistancesButton.setEnabled(True)
            self.imageSlider.setEnabled(True)
            self.xSpinBox.setEnabled(True)
            back.printDistance(self.newImage, self.nearest[1], self.nearest[0], self.xSpinBox.value())
            height, width = self.readImage.shape
            if self.infoCheckBox.isChecked():
                cv2.putText(self.newImage, 'distance: ' + str(self.nearest[1][self.xSpinBox.value()]), (width - 600,height-100), cv2.FONT_HERSHEY_SIMPLEX, 0.50, (255, 255, 255))
            pixmap = QtGui.QPixmap.fromImage(QtGui.QImage(self.newImage.data, width, height, width*3, QtGui.QImage.Format_RGB888))
            self.imageZone.setPixmap(pixmap)
            self.statusbar.showMessage('distance: ' + str(self.nearest[1][self.xSpinBox.value()]))
            self.distanceCase.setText(str(round(self.nearest[1][self.xSpinBox.value()],8)))

            self.infoSeparator.show()
            self.distanceLabel.show()
            self.distanceCase.show()
            self.minLabel.hide()
            self.minCase.hide()
            self.maxLabel.hide()
            self.maxCase.hide()
            self.meanLabel.hide()
            self.meanCase.hide()
            self.stdLabel.hide()
            self.stdCase.hide()
            self.varLabel.hide()
            self.varCase.hide()
            self.infoCheckBox.show()

    
    def setAllDistances(self):
        self.allDistancesButton.setEnabled(False)
        self.allDistancesButton.hide()
        self.actionShow_all.setEnabled(False)
        self.hideAllDistancesButton.setEnabled(True)
        self.hideAllDistancesButton.show()
        self.actionHide_all.setEnabled(True)
        self.imageSlider.setEnabled(False)
        self.xSpinBox.setEnabled(False)
        self.newImage = copy.copy(self.readImageBGR)
        height, width = self.readImage.shape
        if self.actionEuclidean.isChecked():
            back.printDistances(self.newImage, self.nearest[1], self.nearest[0])
            if self.infoCheckBox.isChecked():
                cv2.putText(self.newImage, 'min distance: ' + str(round(min(self.nearest[1]),8)), (width - 600,height-100), cv2.FONT_HERSHEY_SIMPLEX, 0.50, (255, 255, 255))
                cv2.putText(self.newImage, 'max distance: ' + str(round(max(self.nearest[1]),8)), (width - 600,height-80), cv2.FONT_HERSHEY_SIMPLEX, 0.50, (255, 255, 255))
                cv2.putText(self.newImage, 'mean distance: ' + str(round(np.mean(self.nearest[1]),8)), (width - 600,height-60), cv2.FONT_HERSHEY_SIMPLEX, 0.50, (255, 255, 255))
                cv2.putText(self.newImage, 'standard deviation: ' + str(round(np.std(self.nearest[1]),8)), (width - 350,height-100), cv2.FONT_HERSHEY_SIMPLEX, 0.50, (255, 255, 255))
                cv2.putText(self.newImage, 'variance distance: ' + str(round(np.var(self.nearest[1]),8)), (width - 350,height-80), cv2.FONT_HERSHEY_SIMPLEX, 0.50, (255, 255, 255))
            self.statusbar.showMessage('min distance: ' + str(min(self.nearest[1])) + ', max distance: ' + str(max(self.nearest[1])) + ', mean distance: ' + str(np.mean(self.nearest[1])) + ', standard deviation: ' + str(np.std(self.nearest[1])) + ',  variance: ' + str(np.var(self.nearest[1])))
            self.minCase.setText(str(round(min(self.nearest[1]),8)))
            self.maxCase.setText(str(round(max(self.nearest[1]),8)))
            self.meanCase.setText(str(round(np.mean(self.nearest[1]),8)))
            self.stdCase.setText(str(round(np.std(self.nearest[1]),8)))
            self.varCase.setText(str(round(np.var(self.nearest[1]),8)))
        else:
            back.printDistances(self.newImage, self.up[1], self.up[0])
            if self.infoCheckBox.isChecked():
                cv2.putText(self.newImage, 'min distance: ' + str(round(min(self.up[1]),8)), (width - 600,height-100), cv2.FONT_HERSHEY_SIMPLEX, 0.50, (255, 255, 255))
                cv2.putText(self.newImage, 'max distance: ' + str(round(max(self.up[1]),8)), (width - 600,height-80), cv2.FONT_HERSHEY_SIMPLEX, 0.50, (255, 255, 255))
                cv2.putText(self.newImage, 'mean distance: ' + str(round(np.mean(self.up[1]),8)), (width - 600,height-60), cv2.FONT_HERSHEY_SIMPLEX, 0.50, (255, 255, 255))
                cv2.putText(self.newImage, 'standard deviation: ' + str(round(np.std(self.up[1]),8)), (width - 350,height-100), cv2.FONT_HERSHEY_SIMPLEX, 0.50, (255, 255, 255))
                cv2.putText(self.newImage, 'variance distance: ' + str(round(np.var(self.up[1]),8)), (width - 350,height-80), cv2.FONT_HERSHEY_SIMPLEX, 0.50, (255, 255, 255))
            self.statusbar.showMessage('min distance: ' + str(min(self.up[1])) + ', max distance: ' + str(max(self.up[1])) + ', mean distance: ' + str(np.mean(self.up[1])) + ', standard deviation: ' + str(np.std(self.up[1])) + ',  variance: ' + str(np.var(self.up[1])))
            self.minCase.setText(str(round(min(self.up[1]),8)))
            self.maxCase.setText(str(round(max(self.up[1]),8)))
            self.meanCase.setText(str(round(np.mean(self.up[1]),8)))
            self.stdCase.setText(str(round(np.std(self.up[1]),8)))
            self.varCase.setText(str(round(np.var(self.up[1]),8)))
        
        self.infoSeparator.show()
        self.distanceLabel.hide()
        self.distanceCase.hide()
        self.minLabel.show()
        self.minCase.show()
        self.maxLabel.show()
        self.maxCase.show()
        self.meanLabel.show()
        self.meanCase.show()
        self.stdLabel.show()
        self.stdCase.show()
        self.varLabel.show()
        self.varCase.show()
        self.infoCheckBox.show()

        pixmap = QtGui.QPixmap.fromImage(QtGui.QImage(self.newImage.data, width, height, width*3, QtGui.QImage.Format_RGB888))
        self.imageZone.setPixmap(pixmap)
        self.imageZone.repaint()

    def setHideAllDistances(self):
        self.hideAllDistancesButton.setEnabled(False)
        self.hideAllDistancesButton.hide()
        self.actionHide_all.setEnabled(False)
        self.allDistancesButton.setEnabled(True)
        self.allDistancesButton.show()
        self.actionShow_all.setEnabled(True)
        self.imageSlider.setEnabled(True)
        self.xSpinBox.setEnabled(True)
        self.newImage = copy.copy(self.readImageBGR)
        height, width = self.readImage.shape
        if self.actionEuclidean.isChecked():
            back.printDistance(self.newImage, self.nearest[1], self.nearest[0], self.xSpinBox.value())
            if self.infoCheckBox.isChecked():
                cv2.putText(self.newImage, 'distance: ' + str(self.nearest[1][self.xSpinBox.value()]), (width - 600,height-100), cv2.FONT_HERSHEY_SIMPLEX, 0.50, (255, 255, 255))
            self.statusbar.showMessage('distance: ' + str(self.nearest[1][self.xSpinBox.value()]))
            self.distanceCase.setText(str(round(self.nearest[1][self.xSpinBox.value()],8)))
        else:
            back.printDistance(self.newImage, self.up[1], self.up[0], self.xSpinBox.value())
            if self.infoCheckBox.isChecked():
                cv2.putText(self.newImage, 'distance: ' + str(self.up[1][self.xSpinBox.value()]), (width - 600,height-100), cv2.FONT_HERSHEY_SIMPLEX, 0.50, (255, 255, 255))
            self.statusbar.showMessage('distance: ' + str(self.up[1][self.xSpinBox.value()]))
            self.distanceCase.setText(str(round(self.up[1][self.xSpinBox.value()],8)))

        self.infoSeparator.show()
        self.distanceLabel.show()
        self.distanceCase.show()
        self.minLabel.hide()
        self.minCase.hide()
        self.maxLabel.hide()
        self.maxCase.hide()
        self.meanLabel.hide()
        self.meanCase.hide()
        self.stdLabel.hide()
        self.stdCase.hide()
        self.varLabel.hide()
        self.varCase.hide()
        self.infoCheckBox.show()

        pixmap = QtGui.QPixmap.fromImage(QtGui.QImage(self.newImage.data, width, height, width*3, QtGui.QImage.Format_RGB888))
        self.imageZone.setPixmap(pixmap)
        self.imageZone.repaint()


    def setShowCurves(self):
        self.showCurvesButton.setEnabled(False)
        self.showCurvesButton.hide()
        self.hideCurvesButton.setEnabled(True)
        self.hideCurvesButton.show()
        self.actionShowCurves.setEnabled(False)
        self.actionShowCurves.setChecked(True)
        self.actionHideCurves.setEnabled(True)
        self.actionHideCurves.setChecked(False)
        back.printCurvePoints(self.readImageBGR, self.funcDown)
        back.printCurvePoints(self.readImageBGR, self.funcUp)
        if self.imageSlider.isEnabled():
            self.valueChangeXSpinBox()
        elif not self.noneDistance.isChecked():
            self.setAllDistances()
        else: 
            self.valueChangeXSpinBox()
        self.imageZone.repaint()
    
    def setHideCurves(self):
        self.hideCurvesButton.setEnabled(False)
        self.hideCurvesButton.hide()
        self.showCurvesButton.setEnabled(True)
        self.showCurvesButton.show()
        self.actionHideCurves.setEnabled(False)
        self.actionHideCurves.setChecked(True)
        self.actionShowCurves.setEnabled(True)
        self.actionShowCurves.setChecked(False)
        self.readImageBGR = copy.copy(self.initReadImageBGR)
        if self.imageSlider.isEnabled():
            self.valueChangeXSpinBox()
        elif not self.noneDistance.isChecked():
            self.setAllDistances()
        else: 
            self.valueChangeXSpinBox()
        self.imageZone.repaint()


    def valueChangeSlider(self):
        self.xSpinBox.setValue(self.imageSlider.value())
        
    def valueChangeXSpinBox(self):
        self.imageSlider.setValue(self.xSpinBox.value())
        self.newImage = copy.copy(self.readImageBGR)
        height, width = self.readImage.shape
        if self.actionEuclidean.isChecked():
            back.printDistance(self.newImage, self.nearest[1], self.nearest[0], self.xSpinBox.value())
            if self.infoCheckBox.isChecked():
                cv2.putText(self.newImage, 'distance: ' + str(self.nearest[1][self.xSpinBox.value()]), (width - 600,height-100), cv2.FONT_HERSHEY_SIMPLEX, 0.50, (255, 255, 255))
            self.statusbar.showMessage('distance: ' + str(self.nearest[1][self.xSpinBox.value()]))
            self.distanceCase.setText(str(round(self.nearest[1][self.xSpinBox.value()],8)))
        else:
            back.printDistance(self.newImage, self.up[1], self.up[0], self.xSpinBox.value())
            if self.infoCheckBox.isChecked():
                cv2.putText(self.newImage, 'distance: ' + str(self.up[1][self.xSpinBox.value()]), (width - 600,height-100), cv2.FONT_HERSHEY_SIMPLEX, 0.50, (255, 255, 255))
            self.statusbar.showMessage('distance: ' + str(self.up[1][self.xSpinBox.value()]))
            self.distanceCase.setText(str(round(self.up[1][self.xSpinBox.value()],8)))
        pixmap = QtGui.QPixmap.fromImage(QtGui.QImage(self.newImage.data, width, height, width*3, QtGui.QImage.Format_RGB888))
        self.imageZone.setPixmap(pixmap)

    def setInfoOnImage(self):
        if self.allDistancesButton.isEnabled():
            self.valueChangeXSpinBox()
        else:
            self.setAllDistances()
    ##########

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    ui.init()
    sys.exit(app.exec_())
